{
	// Place your snippets for sql here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Create database": {
        "prefix": "createDatabase",
         "body": [
            "CREATE SCHEMA IF NOT EXISTS database_name;",
			"USE database_name;"
         ],
         "description": "Create database"
    },








	// Working with tables --v
	"Create One to Many Table": {
        "prefix": "createOneToManyTable",
         "body": [
            "CREATE TABLE IF NOT EXISTS table_name ( /* One to Many */",
			"id         BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,"
			"name       VARCHAR (255) NOT NULL UNIQUE,"
			"PRIMARY KEY (id)",
			");",
         ],
         "description": "Create One to Many Table"
    },
	"Create Many to One Table": {
        "prefix": "createOneToManyTable",
         "body": [
            "CREATE TABLE IF NOT EXISTS table_name ( /* One to Many */",
			"id         BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,"
			"name       VARCHAR (255) NOT NULL UNIQUE,",
			"other_table_id  BIGINT UNSIGNED,"
			"FOREIGN KEY (other_table_id) REFERENCES other_table (id),"
			"PRIMARY KEY (id)",
			");",
         ],
         "description": "Create Many to One Table"
    },
	"Delete Table": {
        "prefix": "deleteTable",
         "body": [
            "DROP TABLE IF EXISTS table_name;",
         ],
         "description": "Delete Table"
    },
	"Create table PostgreSQL": {
        "prefix": "createTablePostgreSQL",
         "body": [
            "CREATE TABLE table_name ("
			"    id      BIGSERIAL NOT NULL PRIMARY KEY,"
			"    other_table_id BIGSERIAL NOT NULL,"
			"    string_column VARCHAR(255) NOT NULL,"
			"    date_column TIMESTAMP NOT NULL,"
			"    FOREIGN KEY (other_table_id) REFERENCES other_table (id) ON DELETE CASCADE ON UPDATE CASCADE,"
			"    CONSTRAINT UQ_table_name_other_table_id UNIQUE (other_table_id),"
			"    CONSTRAINT UQ_table_name_string_column UNIQUE (string_column),"
			"    PRIMARY KEY (id, string_column)"
			");"
         ],
         "description": "Create database PostgreSQL"
    },
	
	// Working with tables --^








	// Working with columns --^
	"Add new Column PostgreSQL": {
        "prefix": "addColumnPostgreSQL",
         "body": [
            "ALTER TABLE table_name"
			"    ADD COLUMN new_column BIGINT"
			";"
         ],
         "description": "Add new Column PostgreSQL"
    },
	"Change Column PostgreSQL": {
        "prefix": "changeColumnPostgreSQL",
         "body": [
            "ALTER TABLE table_name "
			"    ALTER COLUMN old_column_name TYPE BIGINT"
			"        RENAME old_column_name TO new_column_name"
			";"
         ],
         "description": "Change Column PostgreSQL"
    },
	"Delete Column PostgreSQL": {
        "prefix": "deleteColumnPostgreSQL",
         "body": [
            "ALTER TABLE table_name"
			"    ALTER COLUMN existing_column DROP NOT NULL"
			";"
         ],
         "description": "Delete Column PostgreSQL"
    },
	// Working with columns --^








	// Working with rows --v
	"Insert Create Rows": {
        "prefix": "insertcreateRows",
         "body": [
            "INSERT INTO table_name",
			"       (string_column1, long_column2) /* Insert nothing into id_column */",
			"       /*-------------|------------*/",
			"VALUES (\"Lorem\"       , 5           ),",
			"       (\"Ipsum\"       , 5           )",
			";"
         ],
         "description": "Insert Create Rows"
    },
	"Change Rows PostgreSQL": {
        "prefix": "changeRows",
         "body": [
            "UPDATE table_name"
			"    SET column1 = 'Lorem'"
			"        WHERE column2 = 'Ipsum'"
			";"
         ],
         "description": "Change Rows PostgreSQL"
    },
	"Delete All Rows": {
        "prefix": "deleteTable",
         "body": [
            "DROP FROM table_name;",
         ],
         "description": "Delete All Rows"
    },
	"Delete Row PostgreSQL": {
        "prefix": "deleteTablePostgreSQL",
         "body": [
            "DELETE FROM tablename"
			"    WHERE other_tablename_id IN ("
			"        SELECT id"
			"            FROM other_table"
			"            WHERE column2 = 'Lorem'"
			"    )"
			";"
         ],
         "description": "Delete Row PostgreSQL"
    },
	// Working with rows --^






	// Working with cells --v
	"Get cells using Join PostgreSQL": {
        "prefix": "getCellsUsingJoinPostgreSQL",
         "body": [
            "DELETE FROM tablename"
			"    WHERE other_tablename_id IN ("
			"        SELECT id"
			"            FROM other_table"
			"            WHERE column2 = 'Lorem'"
			"    )"
			";"
         ],
         "description": "Get cells using Join PostgreSQL"
    },
	"Get cells using Union PostgreSQL": {
        "prefix": "getCellsUsingJoinPostgreSQL",
         "body": [
            "SELECT"
			"	table1.column1 AS output_column1,"
			"	table1.column2"
			"	FROM table1"
			"   UNION ALL"
			"	    SELECT"
			"		    table2.column1,"
			"		    table2.column2"
			"	        FROM table2"
			"	        ORDER BY output_column1"
			";"
         ],
         "description": "Get cells using Join PostgreSQL"
    },
	"Get X greatest number from cells PostgreSQL": {
        "prefix": "getCellsUsingJoinPostgreSQL",
         "body": [
            "SELECT text_column  ,"
			"       number_column"
			"    FROM tabl"
			"    ORDER BY number_column ASC OFFSET 1 LIMIT 1"
			";"
         ],
         "description": "Get X greatest number from cells PostgreSQL"
    },
	// Working with cells --^







	// Constraints --v
	"Add new Constraint PostgreSQL": {
        "prefix": "addConstraintPostgreSQL",
         "body": [
            "ALTER TABLE table_name"
			"    ADD CONSTRAINT constraint_name UNIQUE (column1)"
			";"
			"ALTER TABLE table_name"
			"    ADD FOREIGN KEY (table_name_other_table_id) "
			"        REFERENCES other_table"
			";"
         ],
         "description": "Add new Constraint PostgreSQL"
    },
	"Delete Constraint PostgreSQL": {
        "prefix": "addConstraintPostgreSQL",
         "body": [
            "ALTER TABLE tablename"
			"    DROP CONSTRAINT constraintname"
			";"
         ],
         "description": "Delete Constraint PostgreSQL"
    },
	// Constraints --^








	//Categories --v
	"Find Leafs from SubGraph of Categories": {
        "prefix": "findLeafsFromSubGraphOfCategories",
         "body": [
            "WITH RECURSIVE shoppingCategories AS("
			"    SELECT id, name, parent_id, name AS path"
			"    FROM category"
			"    WHERE id = 1 # <-- Insert your id here "
			"    UNION ALL"
			"    SELECT c.id, c.name, c.parent_id, CONCAT(sc.path, '/', c.name)"
			"    FROM shoppingCategories AS sc"
			"        JOIN category AS c ON sc.id = c.parent_id)"
			"SELECT *"
			"FROM shoppingCategories"
			"WHERE id IN(SELECT c1.id"
			"            FROM category AS c1"
			"                LEFT JOIN category AS c2 ON c2.parent_id = c1.id"
			"            WHERE c2.id IS NULL)"
            ";"
         ],
         "description": "Find Leafs from Graph of Categories"
    },
	//Categories --^







	
	//Count --v
	"Count amount of rows with same values in some column": {
        "prefix": "countAmountOfRowsWithSameValuesInColumn",
         "body": [
             "SELECT"
             "    custom_table.column_with_same_values," 
			 "    COUNT(*) AS \"Amount of rows that has same values in column_with_same_values\""
             "FROM"
             "    custom_table"
             "GROUP BY "
             "    custom_table.column_with_same_values # Column in which it will count how many rows has same values"
             ";"
         ],
         "description": "Count amount of rows with same values in some column"
    },
	//Count --^







	// Sum --v
	"Get sum of cells in column PostgreSQL": {
        "prefix": "getSumPostgreSQL",
         "body": [
             "SELECT column1,"
			 "    sum(column2) AS total"
			 "    FROM tablename"
			 "    GROUP BY column1"
			 "    HAVING sum(column2) < interval '5 hours'"
			 ";"
         ],
         "description": "Get sum of cells in column PostgreSQL"
    },
	// Sum --^







	// Transaction --v
	"Create Transaction PostgreSQL": {
        "prefix": "createTransactionPostgreSQL",
         "body": [
             "BEGIN;"
			 "    UPDATE %table1%"
			 "        SET %column2% = %column2% - 100.00"
			 "        WHERE %column1% = %'Lorem'%"
			 "    ;"
			 "    SAVEPOINT %savepoint1%;"
			 "    UPDATE %table1%"
			 "        SET %column2% = %column2% + 100.00"
			 "        WHERE %column1% = %'Ipsum'%"
			 "    ;"
			 "-- oops ... forget that and use Wally's account"
			 "    ROLLBACK TO %savepoint1%;"
			 "    UPDATE %table1%"
			 "        SET %column2% = %column2% + 100.00"
			 "        WHERE %column1% = %'Dolor'%"
			 "    ;"
			 "COMMIT;"
         ],
         "description": "Create Transaction PostgreSQL"
    },
	// Transaction --^
}
